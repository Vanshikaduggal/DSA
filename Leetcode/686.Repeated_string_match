class Solution {
public:

    void lpsfind(vector<int> &lps, string s) {
        int prefix = 0, suffix = 1;
        while (suffix < s.size()) {
            if (s[prefix] == s[suffix]) {
                lps[suffix] = prefix + 1;
                prefix++;
                suffix++;
            } else {
                if (prefix == 0) {
                    lps[suffix] = 0;
                    suffix++;
                } else {
                    prefix = lps[prefix - 1];
                }
            }
        }
    }

    int KMP_MATCH(const string &haystack, const string &needle) {
        if (needle.empty()) return 0; // Edge case: empty needle
        vector<int> lps(needle.size(), 0);
        lpsfind(lps, needle);
        
        int n = haystack.size(), m = needle.size();
        int first = 0, second = 0;
        
        while (first < n) {
            if (needle[second] == haystack[first]) {
                first++;
                second++;
                if (second == m) {
                    return 1; // Match found
                }
            } else {
                if (second == 0) {
                    first++;
                } else {
                    second = lps[second - 1];
                }
            }
        }
        return 0; // Match not found
    }

    int repeatedStringMatch(string a, string b) {
        if (a == b) return 1;
        string temp = a;
        int repeat = 1;

        // Extend `temp` until its size is at least equal to `b`
        while (temp.size() < b.size()) {
            temp += a;
            repeat++;
        }

        // Check if `b` is a substring of the extended `temp`
        if (KMP_MATCH(temp, b)) return repeat;

        // Check if `b` is a substring after adding `a` one more time
        if (KMP_MATCH(temp + a, b)) return repeat + 1;

        return -1; // `b` is not a substring even after extensions
    }
};
